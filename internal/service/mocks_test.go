// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/Killazius/L0/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Create(ctx context.Context, order *domain.Order) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Order) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order *domain.Order
func (_e *MockOrderRepository_Expecter) Create(ctx interface{}, order interface{}) *MockOrderRepository_Create_Call {
	return &MockOrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *MockOrderRepository_Create_Call) Run(run func(ctx context.Context, order *domain.Order)) *MockOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Order
		if args[1] != nil {
			arg1 = args[1].(*domain.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Create_Call) Return(err error) *MockOrderRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Create_Call) RunAndReturn(run func(ctx context.Context, order *domain.Order) error) *MockOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Get(ctx context.Context, orderUID string) (*domain.Order, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockOrderRepository_Expecter) Get(ctx interface{}, orderUID interface{}) *MockOrderRepository_Get_Call {
	return &MockOrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderUID)}
}

func (_c *MockOrderRepository_Get_Call) Run(run func(ctx context.Context, orderUID string)) *MockOrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Get_Call) Return(order *domain.Order, err error) *MockOrderRepository_Get_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderRepository_Get_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (*domain.Order, error)) *MockOrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) GetAll(ctx context.Context) ([]domain.Order, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Order, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Order); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockOrderRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOrderRepository_Expecter) GetAll(ctx interface{}) *MockOrderRepository_GetAll_Call {
	return &MockOrderRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockOrderRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockOrderRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOrderRepository_GetAll_Call) Return(orders []domain.Order, err error) *MockOrderRepository_GetAll_Call {
	_c.Call.Return(orders, err)
	return _c
}

func (_c *MockOrderRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Order, error)) *MockOrderRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderCache creates a new instance of MockOrderCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderCache {
	mock := &MockOrderCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderCache is an autogenerated mock type for the OrderCache type
type MockOrderCache struct {
	mock.Mock
}

type MockOrderCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderCache) EXPECT() *MockOrderCache_Expecter {
	return &MockOrderCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockOrderCache
func (_mock *MockOrderCache) Get(ctx context.Context, orderUID string) (*domain.Order, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOrderCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockOrderCache_Expecter) Get(ctx interface{}, orderUID interface{}) *MockOrderCache_Get_Call {
	return &MockOrderCache_Get_Call{Call: _e.mock.On("Get", ctx, orderUID)}
}

func (_c *MockOrderCache_Get_Call) Run(run func(ctx context.Context, orderUID string)) *MockOrderCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderCache_Get_Call) Return(order *domain.Order, err error) *MockOrderCache_Get_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderCache_Get_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (*domain.Order, error)) *MockOrderCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockOrderCache
func (_mock *MockOrderCache) Set(ctx context.Context, order *domain.Order) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Order) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockOrderCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - order *domain.Order
func (_e *MockOrderCache_Expecter) Set(ctx interface{}, order interface{}) *MockOrderCache_Set_Call {
	return &MockOrderCache_Set_Call{Call: _e.mock.On("Set", ctx, order)}
}

func (_c *MockOrderCache_Set_Call) Run(run func(ctx context.Context, order *domain.Order)) *MockOrderCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Order
		if args[1] != nil {
			arg1 = args[1].(*domain.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderCache_Set_Call) Return(err error) *MockOrderCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderCache_Set_Call) RunAndReturn(run func(ctx context.Context, order *domain.Order) error) *MockOrderCache_Set_Call {
	_c.Call.Return(run)
	return _c
}
