// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"context"

	"github.com/Killazius/L0/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// GetOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) GetOrder(ctx context.Context, uid string) (*domain.Order, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockOrderService_Expecter) GetOrder(ctx interface{}, uid interface{}) *MockOrderService_GetOrder_Call {
	return &MockOrderService_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, uid)}
}

func (_c *MockOrderService_GetOrder_Call) Run(run func(ctx context.Context, uid string)) *MockOrderService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_GetOrder_Call) Return(order *domain.Order, err error) *MockOrderService_GetOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_GetOrder_Call) RunAndReturn(run func(ctx context.Context, uid string) (*domain.Order, error)) *MockOrderService_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}
