// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rest

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// GetOrder provides a mock function for the type MockHandler
func (_mock *MockHandler) GetOrder() http.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 http.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() http.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}
	return r0
}

// MockHandler_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockHandler_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
func (_e *MockHandler_Expecter) GetOrder() *MockHandler_GetOrder_Call {
	return &MockHandler_GetOrder_Call{Call: _e.mock.On("GetOrder")}
}

func (_c *MockHandler_GetOrder_Call) Run(run func()) *MockHandler_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_GetOrder_Call) Return(handlerFunc http.HandlerFunc) *MockHandler_GetOrder_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockHandler_GetOrder_Call) RunAndReturn(run func() http.HandlerFunc) *MockHandler_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}
